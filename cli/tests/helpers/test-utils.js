"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.createTempDir = createTempDir;
exports.cleanupTempDir = cleanupTempDir;
exports.createMockClaudeJson = createMockClaudeJson;
exports.createMockMemoryFiles = createMockMemoryFiles;
exports.createMockBlockedMd = createMockBlockedMd;
exports.readFile = readFile;
exports.fileExists = fileExists;
const fs = __importStar(require("fs-extra"));
const path = __importStar(require("path"));
const os = __importStar(require("os"));
/**
 * Creates a temporary test directory.
 * Returns the absolute path to the directory.
 */
async function createTempDir(prefix = 'mcp-toggle-test-') {
    const tempDir = await fs.mkdtemp(path.join(os.tmpdir(), prefix));
    return tempDir;
}
/**
 * Cleans up a temporary test directory.
 */
async function cleanupTempDir(dirPath) {
    await fs.remove(dirPath);
}
/**
 * Creates a mock .claude.json file with specified MCP servers.
 */
async function createMockClaudeJson(dirPath, servers) {
    await fs.ensureDir(dirPath);
    const filePath = path.join(dirPath, '.claude.json');
    const content = JSON.stringify({ mcpServers: servers }, null, 2);
    await fs.writeFile(filePath, content, 'utf-8');
    return filePath;
}
/**
 * Creates mock memory files in .claude/memories/ directory.
 */
async function createMockMemoryFiles(dirPath, files) {
    const memoriesDir = path.join(dirPath, '.claude', 'memories');
    await fs.ensureDir(memoriesDir);
    const paths = [];
    for (const [filename, content] of Object.entries(files)) {
        const filePath = path.join(memoriesDir, filename);
        await fs.ensureDir(path.dirname(filePath));
        await fs.writeFile(filePath, content, 'utf-8');
        paths.push(filePath);
    }
    return paths;
}
/**
 * Creates a mock blocked.md file.
 */
async function createMockBlockedMd(dirPath, blockedItems) {
    const blockedMdPath = path.join(dirPath, '.claude', 'blocked.md');
    await fs.ensureDir(path.dirname(blockedMdPath));
    const lines = [
        '# Blocked MCP Servers and Memory Files',
        '# Generated by mcp-toggle',
        `# Last updated: ${new Date().toISOString()}`,
        '',
        '## MCP Servers',
    ];
    for (const item of blockedItems.filter((i) => i.type === 'mcp')) {
        lines.push(`mcp:${item.identifier}`);
    }
    lines.push('', '## Memory Files');
    for (const item of blockedItems.filter((i) => i.type === 'memory')) {
        lines.push(`memory:${item.identifier}`);
    }
    const content = lines.join('\n') + '\n';
    await fs.writeFile(blockedMdPath, content, 'utf-8');
    return blockedMdPath;
}
/**
 * Reads the content of a file.
 */
async function readFile(filePath) {
    return await fs.readFile(filePath, 'utf-8');
}
/**
 * Checks if a file exists.
 */
async function fileExists(filePath) {
    try {
        await fs.access(filePath);
        return true;
    }
    catch {
        return false;
    }
}
//# sourceMappingURL=test-utils.js.map