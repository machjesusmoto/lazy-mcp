/**
 * Blocked item manager for .claude/blocked.md files.
 * Reads and parses blocked MCP servers and memory files.
 */

import * as path from 'path';
import * as fs from 'fs-extra';
import { BlockedItem, parseBlockedItem } from '../models';

/**
 * Load blocked items from .claude/blocked.md file.
 * @param projectDir - Project directory containing .claude/blocked.md
 * @returns Array of blocked items
 */
export async function loadBlockedItems(projectDir: string): Promise<BlockedItem[]> {
  // Validate input
  if (!projectDir || typeof projectDir !== 'string') {
    throw new Error('projectDir must be a non-empty string');
  }

  const blockedMdPath = path.join(projectDir, '.claude', 'blocked.md');

  if (!(await fs.pathExists(blockedMdPath))) {
    return [];
  }

  const content = await fs.readFile(blockedMdPath, 'utf-8');
  const lines = content.split('\n');
  const items: BlockedItem[] = [];

  for (const line of lines) {
    const item = parseBlockedItem(line);
    if (item) {
      items.push(item);
    }
  }

  return items;
}

/**
 * Save blocked items to .claude/blocked.md file.
 * Creates the file with proper format for Claude Code to parse.
 * @param projectDir - Project directory where .claude/blocked.md should be saved
 * @param items - Array of blocked items to save
 */
export async function saveBlockedItems(
  projectDir: string,
  items: BlockedItem[]
): Promise<void> {
  // Validate inputs
  if (!projectDir || typeof projectDir !== 'string') {
    throw new Error('projectDir must be a non-empty string');
  }
  if (!Array.isArray(items)) {
    throw new Error('items must be an array');
  }

  const claudeDir = path.join(projectDir, '.claude');
  const blockedMdPath = path.join(claudeDir, 'blocked.md');

  // Ensure .claude directory exists
  await fs.ensureDir(claudeDir);

  // Build blocked.md content
  const lines = [
    '# Blocked MCP Servers and Memory Files',
    '# Generated by mcp-toggle',
    `# Last updated: ${new Date().toISOString()}`,
    '',
    '## MCP Servers',
  ];

  // Add blocked servers
  for (const item of items.filter((i) => i.type === 'mcp')) {
    lines.push(`mcp:${item.identifier}`);
  }

  lines.push('', '## Memory Files');

  // Add blocked memory files
  for (const item of items.filter((i) => i.type === 'memory')) {
    lines.push(`memory:${item.identifier}`);
  }

  const content = lines.join('\n') + '\n';

  // Write file atomically
  await fs.writeFile(blockedMdPath, content, 'utf-8');
}
